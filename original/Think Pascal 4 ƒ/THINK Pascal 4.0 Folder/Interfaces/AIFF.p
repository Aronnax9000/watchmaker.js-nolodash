{	This file has been processed by The THINK Pascal Source Converter, v1.1.	}{}{Created: Tuesday, February 5, 1991 at 4:32 PM}{	AIFF.p}{	Pascal Interface to the Macintosh Libraries}{}{		Copyright Apple Computer, Inc. 1990-1991}{		All rights reserved}{}unit AIFF;interface	const		AIFFID = 'AIFF';		AIFCID = 'AIFC';		FormatVersionID = 'FVER';		CommonID = 'COMM';		FORMID = 'FORM';		SoundDataID = 'SSND';		MarkerID = 'MARK';		InstrumentID = 'INST';		MIDIDataID = 'MIDI';		AudioRecordingID = 'AESD';		ApplicationSpecificID = 'APPL';		CommentID = 'COMT';		NameID = 'NAME';		AuthorID = 'AUTH';		CopyrightID = '(c) ';		AnnotationID = 'ANNO';		NoLooping = 0;		ForwardLooping = 1;		ForwardBackwardLooping = 2;{ AIFF-C Versions }		AIFCVersion1 = $A2805140;{ Compression Types }		NoneName = 'pnot compressed';		ACE2to1Name = 'ACE 2-to-1';		ACE8to3Name = 'ACE 8-to-3';		MACE3to1Name = 'MACE 3-to-1';		MACE6to1Name = 'MACE 6-to-1';{ Compression Names }		NoneType = 'NONE';		ACE2Type = 'ACE2';		ACE8Type = 'ACE8';		MACE3Type = 'MAC3';		MACE6Type = 'MAC6';	type		ID = LONGINT;		MarkerIdType = INTEGER;		ChunkHeader = record				ckID: ID;				ckSize: LONGINT;			end;		ContainerChunk = record				ckID: ID;				ckSize: LONGINT;				formType: ID;			end;		FormatVersionChunkPtr = ^FormatVersionChunk;		FormatVersionChunk = record				ckID: ID;				ckSize: LONGINT;				timestamp: LONGINT;			end;		CommonChunkPtr = ^CommonChunk;		CommonChunk = record				ckID: ID;				ckSize: LONGINT;				numChannels: INTEGER;				numSampleFrames: LONGINT;				sampleSize: INTEGER;				sampleRate: extended;			end;		ExtCommonChunkPtr = ^ExtCommonChunk;		ExtCommonChunk = record				ckID: ID;				ckSize: LONGINT;				numChannels: INTEGER;				numSampleFrames: LONGINT;				sampleSize: INTEGER;				sampleRate: extended;				compressionType: ID;				compressionName: packed array[0..0] of Byte;			end;		SoundDataChunkPtr = ^SoundDataChunk;		SoundDataChunk = record				ckID: ID;				ckSize: LONGINT;				offset: LONGINT;				blockSize: LONGINT;			end;		Marker = record				id: MarkerIdType;				position: LONGINT;				markerName: Str255;			end;		MarkerChunkPtr = ^MarkerChunk;		MarkerChunk = record				ckID: ID;				ckSize: LONGINT;				numMarkers: INTEGER;				Markers: array[0..0] of Marker;			end;		AIFFLoop = record				playMode: INTEGER;				beginLoop: MarkerIdType;				endLoop: MarkerIdType;			end;		InstrumentChunkPtr = ^InstrumentChunk;		InstrumentChunk = record				ckID: ID;				ckSize: LONGINT;				baseFrequency: Byte;				detune: Byte;				lowFrequency: Byte;				highFrequency: Byte;				lowVelocity: Byte;				highVelocity: Byte;				gain: INTEGER;				sustainLoop: AIFFLoop;				releaseLoop: AIFFLoop;			end;		MIDIDataChunkPtr = ^MIDIDataChunk;		MIDIDataChunk = record				ckID: ID;				ckSize: LONGINT;				MIDIdata: array[0..0] of SignedByte;			end;		AudioRecordingChunkPtr = ^AudioRecordingChunk;		AudioRecordingChunk = record				ckID: ID;				ckSize: LONGINT;				AESChannelStatus: array[0..23] of SignedByte;			end;		ApplicationSpecificChunkPtr = ^ApplicationSpecificChunk;		ApplicationSpecificChunk = record				ckID: ID;				ckSize: LONGINT;				applicationSignature: OSType;				data: array[0..0] of Byte;			end;		Comment = record				timeStamp: LONGINT;				marker: MarkerIdType;				count: INTEGER;				text: array[0..0] of Byte;			end;		CommentsChunkPtr = ^CommentsChunk;		CommentsChunk = record				ckID: ID;				ckSize: LONGINT;				numComments: INTEGER;				comments: array[0..0] of Comment;			end;		TextChunkPtr = ^TextChunk;		TextChunk = record				ckID: ID;				ckSize: LONGINT;				text: array[0..0] of Byte;			end;    { UsingAIFF }implementationend.
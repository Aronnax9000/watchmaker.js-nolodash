{	This file has been processed by The THINK Pascal Source Converter, v1.1.	}{}{	Terminals.p}{	Pascal Interface to the Terminal Manager}{	}{	Copyright © Apple Computer, Inc. 1988-90}{	All rights reserved}{}unit Terminals;interface	uses		AppleTalk, CTBUtilities, Connections;	const{ current Terminal Manager version }		curTMVersion = 2;{ current Terminal Manager Environment Record version }		curTermEnvRecVers = 0;{ TMErr }		tmGenericError = -1;		tmNoErr = 0;		tmNotSent = 1;		tmEnvironsChanged = 2;		tmNotSupported = 7;		tmNoTools = 8;{ TMFlags }		tmInvisible = $00000001;		tmSaveBeforeClear = $00000002;		tmNoMenus = $00000004;		tmAutoScroll = $00000008;{ TMSelTypes & TMSearchTypes }		selTextNormal = $0001;		selTextBoxed = $0002;		selGraphicsMarquee = $0004;		selGraphicsLasso = $0008;		tmSearchNoDiacrit = $0100;	{These are only for TMSearchTypes}		tmSearchNoCase = $0200;{ TMCursorTypes }		cursorText = 1;		cursorGraphics = 2;{ TMTermTypes }		tmTextTerminal = $0001;		tmGraphicsTerminal = $0002;{ TMChooseRec messages	}		tmChooseNochange = 1;		tmChooseBackdoor = 2;	type		TMErr = OSErr;		TMFlags = LONGINT;		TMSelTypes = INTEGER;		TMSearchTypes = INTEGER;		TMCursorTypes = INTEGER;		TMTermTypes = INTEGER;	{ TMChoose data structures }		TMChooseRecPtr = ^TMChooseRec;		TMChooseRec = record				reserved: LONGINT;				msg: LONGINT;				idleProc: ProcPtr;				filterProc: ProcPtr;				newTool: Str63;				newConfig: Ptr;				eventProc: ProcPtr;			end;		TermDataBlockH = ^TermDataBlockPtr;		TermDataBlockPtr = ^TermDataBlock;		TermDataBlock = record				flags: TMTermTypes;				theData: Handle;				auxData: Handle;				reserved: LONGINT;			end;		TermEnvironPtr = ^TermEnvironRec;		TermEnvironRec = record				version: INTEGER;				termType: TMTermTypes;				textRows: INTEGER;				textCols: INTEGER;				cellSize: Point;				graphicSize: Rect;				slop: Point;				auxSpace: Rect;			end;		TMSelection = record				case INTEGER of					1: (							selRect: Rect;					);					2: (							selRgnHandle: RgnHandle;							filler: LONGINT;					);			end;		TermHandle = ^TermPtr;		TermPtr = ^TermRecord;		TermRecord = record				procID: INTEGER;				flags: TMFlags;				errCode: TMErr;				refCon: LONGINT;				userData: LONGINT;				defProc: ProcPtr;				config: Ptr;				oldConfig: Ptr;				environsProc: ProcPtr;				reserved1: LONGINT;				reserved2: LONGINT;				tmPrivate: Ptr;				sendProc: ProcPtr;				breakProc: ProcPtr;				cacheProc: ProcPtr;				clikLoop: ProcPtr;				owner: WindowPtr;				termRect: Rect;				viewRect: Rect;				visRect: Rect;				lastIdle: LONGINT;				selection: TMSelection;				selType: TMSelTypes;				mluField: LONGINT;			end;	function InitTM: TMErr;	function TMGetVersion (hTerm: TermHandle): Handle;	function TMGetTMVersion: INTEGER;	function TMNew (termRect: Rect; viewRect: Rect; flags: TMFlags; procID: INTEGER; owner: WindowPtr; sendProc: ProcPtr; cacheProc: ProcPtr; breakProc: ProcPtr; clikLoop: ProcPtr; environsProc: ProcPtr; refCon: LONGINT; userData: LONGINT): TermHandle;	procedure TMDispose (hTerm: TermHandle);	procedure TMKey (hTerm: TermHandle; theEvent: EventRecord);	procedure TMUpdate (hTerm: TermHandle; visRgn: RgnHandle);	procedure TMPaint (hTerm: TermHandle; theTermData: TermDataBlock; theRect: Rect);	procedure TMActivate (hTerm: TermHandle; activate: BOOLEAN);	procedure TMResume (hTerm: TermHandle; resume: BOOLEAN);	procedure TMClick (hTerm: TermHandle; theEvent: EventRecord);	procedure TMIdle (hTerm: TermHandle);	function TMStream (hTerm: TermHandle; theBuffer: Ptr; theLength: LONGINT; flags: CMFlags): LONGINT;	function TMMenu (hTerm: TermHandle; menuID: INTEGER; item: INTEGER): BOOLEAN;	procedure TMReset (hTerm: TermHandle);	procedure TMClear (hTerm: TermHandle);	procedure TMResize (hTerm: TermHandle; newViewRect: Rect);	function TMGetSelect (hTerm: TermHandle; theData: Handle; var theType: ResType): LONGINT;	procedure TMGetLine (hTerm: TermHandle; lineNo: INTEGER; var theTermData: TermDataBlock);	procedure TMSetSelection (hTerm: TermHandle; theSelection: TMSelection; selType: TMSelTypes);	procedure TMScroll (hTerm: TermHandle; dH, dV: INTEGER);	function TMValidate (hTerm: TermHandle): BOOLEAN;	procedure TMDefault (var theConfig: Ptr; procID: INTEGER; allocate: BOOLEAN);	function TMSetupPreflight (procID: INTEGER; var magicCookie: LONGINT): Handle;	procedure TMSetupSetup (procID: INTEGER; theConfig: Ptr; count: INTEGER; theDialog: DialogPtr; var magicCookie: LONGINT);	function TMSetupFilter (procID: INTEGER; theConfig: Ptr; count: INTEGER; theDialog: DialogPtr; var theEvent: EventRecord; var theItem: INTEGER; var magicCookie: LONGINT): BOOLEAN;	procedure TMSetupItem (procID: INTEGER; theConfig: Ptr; count: INTEGER; theDialog: DialogPtr; var theItem: INTEGER; var magicCookie: LONGINT);	procedure TMSetupCleanup (procID: INTEGER; theConfig: Ptr; count: INTEGER; theDialog: DialogPtr; var magicCookie: LONGINT);	procedure TMSetupXCleanup (procID: INTEGER; theConfig: Ptr; count: INTEGER; theDialog: DialogPtr; OKed: BOOLEAN; var magicCookie: LONGINT);	procedure TMSetupPostflight (procID: INTEGER);	function TMGetConfig (hTerm: TermHandle): Ptr;	function TMSetConfig (hTerm: TermHandle; thePtr: Ptr): INTEGER;	function TMIntlToEnglish (hTerm: TermHandle; inputPtr: Ptr; var outputPtr: Ptr; language: INTEGER): OSErr;	function TMEnglishToIntl (hTerm: TermHandle; inputPtr: Ptr; var outputPtr: Ptr; language: INTEGER): OSErr;	procedure TMGetToolName (id: INTEGER; var name: Str255);	function TMGetProcID (name: Str255): INTEGER;	procedure TMSetRefCon (hTerm: TermHandle; refCon: LONGINT);	function TMGetRefCon (hTerm: TermHandle): LONGINT;	procedure TMSetUserData (hTerm: TermHandle; userData: LONGINT);	function TMGetUserData (hTerm: TermHandle): LONGINT;	function TMAddSearch (hTerm: TermHandle; theString: Str255; where: Rect; searchType: TMSearchTypes; callBack: ProcPtr): INTEGER;	procedure TMRemoveSearch (hTerm: TermHandle; refnum: INTEGER);	procedure TMClearSearch (hTerm: TermHandle);	function TMGetCursor (hTerm: TermHandle; cursType: TMCursorTypes): Point;	function TMGetTermEnvirons (hTerm: TermHandle; var theEnvirons: TermEnvironRec): TMErr;	function TMChoose (var hTerm: TermHandle; where: Point; idleProc: ProcPtr): INTEGER;	function TMPChoose (var hTerm: TermHandle; where: Point; var cRec: TMChooseRec): INTEGER;	procedure TMEvent (hTerm: TermHandle; theEvent: EventRecord);	function TMDoTermKey (hTerm: TermHandle; theKey: Str255): BOOLEAN;	function TMCountTermKeys (hTerm: TermHandle): INTEGER;	procedure TMGetIndTermKey (hTerm: TermHandle; id: INTEGER; var theKey: Str255);	procedure TMGetErrorString (hTerm: TermHandle; id: INTEGER; var errMsg: Str255); {UsingTerminals}implementationend.
{ PasLibIntf.p  --  Interface to Pascal Runtime Library }{ Copyright © Symantec Corporation 1988 }UNIT PasLibIntf;{ This file contains utility routines specific to the THINK's Lightspeed Pascalª }{ Runtime Library.  These routines supplement the I/O and Error Handling routines }{ that are predefined in THINK's Lightspeed Pascalª. }{ When using these routines, the library "Runtime.lib" *must* be present in your project. }INTERFACE{ Runtime Error Codes }	CONST		rteNILPOINTER	=	11;			{ attempt to DISPOSE a nil pointer }		rteNOCLASS		=	13;			{ invalid object type cast }		rteNOMETHOD		=	14;			{ method not found }		rteCLOSEANON	=	15;			{ can't CLOSE an anonymous file }		rteNOTWRITEABLE	=	16;			{ file is not opened for writing }		rteNOTREADABLE	=	17;			{ file is not opened for reading }		rteNOTREADWRITE	=	18;			{ file is not opened for random access }		rteENDOFFILE	=	19;			{ end of file during read }		rteFILENOTOPEN	=	20;			{ file is not open }		rteNOTDISK		=	21;			{ file is not a disk file }		rteSEEKNOTPOS	=	22;			{ component in seek is < 0 }		rteALREADYOPEN	=	23;			{ file is already open }		rteBADDEVICE	=	24;			{ bad device type for open/rewrite/reset }		rtePORTINUSE	=	25;			{ port is in use by AppleTalk }		rteNOTANUMBER	=	26;			{ illegal signed-number in read }		rteSTRTOOLONG	=	27;			{ string too long in read/write }		rteNOTENUMVALUE	=	28;			{ illegal enum value in read }		rteNOTREALVALUE	=	29;			{ illegal floating-point value in read }		rteBADPACK		=	31;			{ index out-of-range in PACK/UNPACK }		rteBADPATH		=	32;			{ path name too long in OLDFILENAME/NEWFILENAME }{ Auxiliary I/O Routines }	PROCEDURE __PLSetFInfo (fType, fCreator: OSType);			{ Set the default Type and Creator for files created with REWRITE and OPEN }		{ Normally, type "TEXT" is used for text files, and "DATA" is used for non-text }		{ files.  The default creator is "JOHN". }		{ See also Inside Macintosh, Volume IV, page 104 }		PROCEDURE __PLSetAccess (bufferPtr: Ptr);			{ Set the access path's buffer for files opened with RESET, REWRITE or OPEN }		{ "bufferPtr" must point to a 522 byte memory buffer. }		{ See also Inside Macintosh, Volume IV, pages 94-96 }		PROCEDURE __PLSetPermssn (permission: INTEGER);			{ Set the ioPermssn to be used for files opened with RESET, REWRITE or OPEN }		{ See also Inside Macintosh, Volume IV, pages 94-96 }	{ Error Handling Routines }	PROCEDURE __PLSetErrorProc (FUNCTION ErrorProc (errorCode: INTEGER): INTEGER);			{ Set up an Error Hook to be called for Heap and I/O errors. }		{ If the error handler returns 0, execution continues at the point }		{ following the call which raised the error condition.  Otherwise, }		{ the following attempts are made to report the error: }		{		1.	Report via Lightspeed Pascal }		{		2.	Report via a (user-supplied) Fatal Error Handler }		{		3.	Report via MacsBug or TMON (error code on stack) }		{ If none of these succeed in terminating the program, we will bomb ID=12. }				{ The user-supplied Fatal Error Handler is a code resource, type='LSP ' and }		{ id=2002.  It is declared as "PROCEDURE UserHandle(errorCode: INTEGER);" }		{ An example is provided in "Runtime.rsrc" for use in Standalone Applications. }			PROCEDURE __PLReport (errorCode: INTEGER);			{ Report an error if "errorCode" is not 0.  The error-handling strategies }		{ described above are attempted until someone handles it. }{ The following routines are predefined in THINK's Lightspeed Pascal. }{ They are duplicated here for documentation purposes only. }	PROCEDURE HeapCheck (enabled: BOOLEAN);			{ Enable/Disable reporting of errors from NEW and DISPOSE }			FUNCTION HeapResult: INTEGER;			{ Return result of last NEW or DISPOSE call }		{ Positive error codes are as above, negative codes are Macintosh System Errors }	PROCEDURE IOCheck (enabled: BOOLEAN);			{ Enable/Disable reporting of errors from I/O routines }			FUNCTION IOResult: INTEGER;			{ Return result of last I/O call }		{ Positive error codes are as above, negative codes are Macintosh System Errors }IMPLEMENTATION	PROCEDURE __PLSetFInfo (fType, fCreator: OSType);	EXTERNAL;		PROCEDURE __PLSetAccess (bufferPtr: Ptr);	EXTERNAL;	PROCEDURE __PLSetPermssn (permission: INTEGER);	EXTERNAL;		PROCEDURE __PLSetErrorProc (FUNCTION ErrorProc (errorCode: INTEGER): INTEGER);	EXTERNAL;	PROCEDURE __PLReport (errorCode: INTEGER);	EXTERNAL;		PROCEDURE HeapCheck (enabled: BOOLEAN);	EXTERNAL;			FUNCTION HeapResult: INTEGER;	EXTERNAL;	PROCEDURE IOCheck (enabled: BOOLEAN);	EXTERNAL;			FUNCTION IOResult: INTEGER;	EXTERNAL;END.
{	This file has been processed by The THINK Pascal Source Converter, v1.1.	}{}{Created: Saturday, January 19, 1991 at 7:08 AM}{    Palettes.p}{    Pascal Interface to the Macintosh Libraries}{}{        Copyright Apple Computer, Inc.    1987-1990}{        All rights reserved}{}unit Palettes;interface	const		pmCourteous = 0;                            {Record use of color on each device touched.}		pmTolerant = $0002;                         {render ciRGB if ciTolerance is exceeded by best match.}		pmAnimated = $0004;                         {reserve an index on each device touched and render ciRGB.}		pmExplicit = $0008;                         {no reserve, no render, no record; stuff index into port.}		pmWhite = $0010;		pmBlack = $0020;		pmInhibitG2 = $0100;		pmInhibitC2 = $0200;		pmInhibitG4 = $0400;		pmInhibitC4 = $0800;		pmInhibitG8 = $1000;		pmInhibitC8 = $2000;{ NSetPalette Update Constants }		pmNoUpdates = $8000;                        {no updates}		pmBkUpdates = $A000;                        {background updates only}		pmFgUpdates = $C000;                        {foreground updates only}		pmAllUpdates = $E000;                       {all updates}	type		ColorInfo = record				ciRGB: RGBColor;                        {true RGB values}				ciUsage: INTEGER;                       {color usage}				ciTolerance: INTEGER;                   {tolerance value}				ciDataFields: array[0..2] of INTEGER;  {private fields}			end;		PalettePtr = ^Palette;		PaletteHandle = ^PalettePtr;		Palette = record				pmEntries: INTEGER;                     {entries in pmTable}				pmDataFields: array[0..6] of INTEGER;  {private fields}				pmInfo: array[0..0] of ColorInfo;			end;	procedure InitPalettes;	inline		$AA90;	function NewPalette (entries: INTEGER; srcColors: CTabHandle; srcUsage: INTEGER; srcTolerance: INTEGER): PaletteHandle;	inline		$AA91;	function GetNewPalette (PaletteID: INTEGER): PaletteHandle;	inline		$AA92;	procedure DisposePalette (srcPalette: PaletteHandle);	inline		$AA93;	procedure ActivatePalette (srcWindow: WindowPtr);	inline		$AA94;	procedure SetPalette (dstWindow: WindowPtr; srcPalette: PaletteHandle; cUpdates: BOOLEAN);	inline		$AA95;	procedure NSetPalette (dstWindow: WindowPtr; srcPalette: PaletteHandle; nCUpdates: INTEGER);	inline		$AA95;	function GetPalette (srcWindow: WindowPtr): PaletteHandle;	inline		$AA96;	procedure CopyPalette (srcPalette: PaletteHandle; dstPalette: PaletteHandle; srcEntry: INTEGER; dstEntry: INTEGER; dstLength: INTEGER);	inline		$AAA1;	procedure PmForeColor (dstEntry: INTEGER);	inline		$AA97;	procedure PmBackColor (dstEntry: INTEGER);	inline		$AA98;	procedure AnimateEntry (dstWindow: WindowPtr; dstEntry: INTEGER; srcRGB: RGBColor);	inline		$AA99;	procedure AnimatePalette (dstWindow: WindowPtr; srcCTab: CTabHandle; srcIndex: INTEGER; dstEntry: INTEGER; dstLength: INTEGER);	inline		$AA9A;	procedure GetEntryColor (srcPalette: PaletteHandle; srcEntry: INTEGER; var dstRGB: RGBColor);	inline		$AA9B;	procedure SetEntryColor (dstPalette: PaletteHandle; dstEntry: INTEGER; srcRGB: RGBColor);	inline		$AA9C;	procedure GetEntryUsage (srcPalette: PaletteHandle; srcEntry: INTEGER; var dstUsage: INTEGER; var dstTolerance: INTEGER);	inline		$AA9D;	procedure SetEntryUsage (dstPalette: PaletteHandle; dstEntry: INTEGER; srcUsage: INTEGER; srcTolerance: INTEGER);	inline		$AA9E;	procedure CTab2Palette (srcCTab: CTabHandle; dstPalette: PaletteHandle; srcUsage: INTEGER; srcTolerance: INTEGER);	inline		$AA9F;	procedure Palette2CTab (srcPalette: PaletteHandle; dstCTab: CTabHandle);	inline		$AAA0;	function Entry2Index (entry: INTEGER): LONGINT;	inline		$7000, $AAA2;	procedure RestoreDeviceClut (gd: GDHandle);	inline		$7002, $AAA2;	procedure ResizePalette (p: PaletteHandle; size: INTEGER);	inline		$7003, $AAA2;	procedure SaveFore (var c: ColorSpec);	inline		$303C, $040D, $AAA2;	procedure SaveBack (var c: ColorSpec);	inline		$303C, $040E, $AAA2;	procedure RestoreFore (c: ColorSpec);	inline		$303C, $040F, $AAA2;	procedure RestoreBack (c: ColorSpec);	inline		$303C, $0410, $AAA2;	function SetDepth (gd: GDHandle; depth: INTEGER; whichFlags: INTEGER; flags: INTEGER): OSErr;	inline		$303C, $0A13, $AAA2;	function HasDepth (gd: GDHandle; depth: INTEGER; whichFlags: INTEGER; flags: INTEGER): INTEGER;	inline		$303C, $0A14, $AAA2;	function PMgrVersion: INTEGER;	inline		$7015, $AAA2;	procedure SetPaletteUpdates (p: PaletteHandle; updates: INTEGER);	inline		$303C, $0616, $AAA2;	function GetPaletteUpdates (p: PaletteHandle): INTEGER;	inline		$303C, $0417, $AAA2;	function GetGray (device: GDHandle; backGround: RGBColor; var foreGround: RGBColor): BOOLEAN;	inline		$303C, $1219, $AAA2;    { UsingPalettes }implementationend.
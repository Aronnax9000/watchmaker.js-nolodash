unit fossils;interface	uses		globals, miscellaneous, biomorphs, engineering;implementation	procedure MyAction (MyControl: ControlHandle; PartCode: INTEGER);	begin		case PartCode of			0: 				; {SysBeep(1)}			inUpButton: 				begin					FossilCounter := FossilCounter - 1;					if FossilCounter < 0 then						FossilCounter := 0;				end;			inDownButton: 				begin					FossilCounter := FossilCounter + 1;					if FossilCounter > NumberinFile then						FossilCounter := NumberinFile				end;			inPageUp: 				begin					FossilCounter := FossilCounter - 1;					if FossilCounter < 0 then						FossilCounter := 0;				end;			inPageDown: 				begin					FossilCounter := FossilCounter + 1;					if FossilCounter > NumberinFile then						FossilCounter := NumberinFile				end;			inThumb: 				begin					FossilCounter := GetCtlValue(myControl)				end;			otherwise   {SysBeep(1)}		end; {Cases}		if PartCode <> 0 then			begin				SetCtlValue(myControl, FossilCounter);				Seek(Slides, NumberinFile - FossilCounter);				Read(Slides, theBiomorph);				DelayedDrawing := TRUE;				ZeroMargin := FALSE;				Develop(theBiomorph, MidPoint);				DelayedDrawing := FALSE;				Snapshot(MyPic, PlayBackRect, theBiomorph);			end;{IF NOT Fossilizing THEN}		Child[special] := theBiomorph;	end; {MyAction}	procedure DoPlayBack (MLoc: Point);		var			DoubleRect: rect;			AllDone, Going: BOOLEAN;			thePart: INTEGER;			theControl: ControlHandle;	begin {DoPlayBack}		PlayBackRect := PlayBackPtr^.PortRect;		with PlayBackRect do			begin				right := right - Scrollbarwidth - 1;				bottom := bottom - Scrollbarwidth - 1;				MidPoint.h := (right - left) div 2;				MidPoint.v := (bottom - top) div 2			end;		if NumberInFile >= 1 then			begin				thePart := FindControl(MLoc, PlayBackPtr, theControl);				if thePart = inThumb then					begin						thePart := TrackControl(theControl, MLoc, nil);						MyAction(theControl, thePart) {was myControl. seems to make no difference!}					end				else					thePart := TrackControl(theControl, MLoc, @MyAction);			end;{InvalRect(TheControl^^.ContrlRect);}	end; {DoPlayBack}	procedure StartPlayBack;		var			thePart, j: INTEGER;			mous: Point;	begin		SmallMenus;		if FrontWindow = MainPtr then			StoreOffScreen(MainPtr^.PortRect, MyBitMap);		NumberInFile := 0;		repeat			NumberInFile := NumberInFile + 1;			read(Slides, theBiomorph)		until eof(Slides);		Reset(Slides);		NumberInFile := NumberInFile - 1;		SetUpBoxes;		SelectWindow(PlayBackPtr);		SetPort(PlayBackPtr);		ShowWindow(PlayBackPtr);		frontw := PlayBackPtr;		SetCtlMax(MyControl, NumberInFile);		SetCtlMin(MyControl, 0);		SetCtlValue(MyControl, 0);		DrawControls(PlayBackPtr);		DrawGrowIcon(PlayBackPtr);		SaveMode := theMode;		TheMode := PlayingBack;		FossilCounter := 0;		PlayBackRect := PlayBackPtr^.PortRect;		with PlayBackRect do			begin				right := right - Scrollbarwidth - 1;				bottom := bottom - Scrollbarwidth - 1;				MidPoint.h := (right - left) div 2;				MidPoint.v := (bottom - top) div 2			end;		Seek(Slides, NumberInFile);		Read(Slides, theBiomorph);		FirstBiomorph := theBiomorph;		Child[special] := theBiomorph;		DelayedDrawing := TRUE;		ZeroMargin := FALSE;		Develop(theBiomorph, MidPoint);		DelayedDrawing := FALSE;		Snapshot(MyPic, PlayBackRect, theBiomorph);	end; {StartPlayBack}	procedure ResetFossils;	FORWARD;	procedure ClosePlayBack;	begin		SelectWindow(MainPtr);		Frontw := MainPtr;		SetPort(MainPtr);		TheMode := SaveMode;		FlushEvents(EveryEvent, 0);{ValidRect(Prect);}		LargeMenus;	end; {ClosePlayBack}	procedure SaveSlides;		var			j: INTEGER;			ThisMenagerie: Menagerie;			aFossil: Person;	begin		ThisMenagerie.Size := 0;		Reset(Slides);		while not eof(Slides) do			begin				read(Slides, aFossil);				ThisMenagerie.Size := ThisMenagerie.Size + 1;				ThisMenagerie.Member[ThisMenagerie.Size] := aFossil;			end;		SaveAnimals(ThisMenagerie, TRUE);	end; {SaveSlides}	procedure ResetFossils;		var			Verdict: INTEGER;	begin		Fossilizing := TRUE; {Reset Fossil Record}		Filetype := 'FOSS';		ReWrite(Slides){****}	end; {ResetFossils}end.